def registry = 'https://siva1204.jfrog.io'
def imageName = 'siva1204.jfrog.io/valaxy-docker-local/ttrend'
def version   = '2.1.3'
pipeline {
    agent {
        node {
            label 'maven'
            
        }
    }
environment {
    PATH = "/opt/apache-maven-3.9.4/bin:$PATH"
}
    stages {
        stage('Contineous-Build') {
            steps {
                echo "------------Build started-----------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "------------Build completed-----------"
            }
        }

        stage('Contineous-unit-Test') {
            steps {
                echo "------------unit test cases started-----------"
                sh 'mvn surefire-report:report'
                echo "------------unit test cases completed-----------"
            }
        }

	    stage('Contineous Test') {
        environment {
            scannerHome = tool 'demo-sonarqube-scanner'
             }
            steps {
                withSonarQubeEnv('demo-sonarqube-server') {
                // Run SonarScanner
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage("Jar Publish") {
        steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"Jfrog-cred"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'  
            
            }
        }   
    }

        stage(" Docker Build ") {
          steps {
            script {
               echo '<--------------- Docker Build Started --------------->'
               app = docker.build(imageName+":"+version)
               echo '<--------------- Docker Build Ends --------------->'
            }
          }
        }

                stage (" Docker Publish "){
            steps {
                script {
                   echo '<--------------- Docker Publish Started --------------->'  
                    docker.withRegistry(registry, 'Jfrog-cred'){
                        app.push()
                    }    
                   echo '<--------------- Docker Publish Ended --------------->'  
                }
            }
        }
        stage ("Deploy using K8S") {
            steps {
                script {
                    sh './deploy.sh'
                }
            }
        }
    }
}
